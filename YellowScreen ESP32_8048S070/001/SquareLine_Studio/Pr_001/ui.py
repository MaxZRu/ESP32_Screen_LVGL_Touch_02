# This file was generated by SquareLine Studio
# SquareLine Studio version: SquareLine Studio 1.5.0
# LVGL version: 8.3.11
# Project name: SquareLine_Project

import lvgl as lv
import ui_images

dispp = lv.disp_get_default()
theme = lv.theme_default_init(dispp, lv.palette_main(lv.PALETTE.BLUE), lv.palette_main(lv.PALETTE.RED), False, lv.font_default())
dispp.set_theme(theme)

font_FontHR20 = lv.font_load("A:ui_font_FontHR20.bin")

def ui_theme_set(idx):
   return

def SetFlag( obj, flag, value):
    if (value):
        obj.add_flag(flag)
    else:
        obj.clear_flag(flag)
    return

_ui_comp_table = {}
_ui_comp_prev = None
_ui_name_prev = None
_ui_child_prev = None
_ui_comp_table.clear()

def _ui_comp_del_event(e):
    target = e.get_target()
    _ui_comp_table[id(target)].remove()

def ui_comp_get_child(comp, child_name):
    return _ui_comp_table[id(comp)][child_name]

def ui_comp_get_root_from_child(child, compname):
    for component in _ui_comp_table:
        if _ui_comp_table[component]["_CompName"]==compname:
            for part in _ui_comp_table[component]:
                if id(_ui_comp_table[component][part]) == id(child):
                    return _ui_comp_table[component]
    return None
def SetBarProperty(target, id, val):
   if id == 'Value_with_anim': target.set_value(val, lv.ANIM.ON)
   if id == 'Value': target.set_value(val, lv.ANIM.OFF)
   return

def SetPanelProperty(target, id, val):
   if id == 'Position_X': target.set_x(val)
   if id == 'Position_Y': target.set_y(val)
   if id == 'Width': target.set_width(val)
   if id == 'Height': target.set_height(val)
   return

def SetDropdownProperty(target, id, val):
   if id == 'Selected':
      target.set_selected(val)
   return

def SetImageProperty(target, id, val, val2):
   if id == 'Image': target.set_src(val)
   if id == 'Angle': target.set_angle(val2)
   if id == 'Zoom': target.set_zoom(val2)
   return

def SetLabelProperty(target, id, val):
   if id == 'Text': target.set_text(val)
   return

def SetRollerProperty(target, id, val):
   if id == 'Selected':
      target.set_selected(val, lv.ANIM.OFF)
   if id == 'Selected_with_anim':
      target.set_selected(val, lv.ANIM.ON)
   return

def SetSliderProperty(target, id, val):
   if id == 'Value_with_anim': target.set_value(val, lv.ANIM.ON)
   if id == 'Value': target.set_value(val, lv.ANIM.OFF)
   return

def ChangeScreen( src, fademode, speed, delay):
    print("Change screen to: "+str([name for name in globals() if globals()[name] is src]))
    lv.scr_load_anim(src, fademode, speed, delay, False)
    return

def DeleteScreen(src):
    return

def IncrementArc( trg, val):
    trg.set_value(trg.get_value()+val)
    lv.event_send(trg,lv.EVENT.VALUE_CHANGED, None)
    return

def IncrementBar( trg, val, anim):
    trg.set_value(trg.get_value()+val,anim)
    return

def IncrementSlider( trg, val, anim):
    trg.set_value(trg.get_value()+val,anim)
    lv.event_send(trg,lv.EVENT.VALUE_CHANGED, None)
    return

def KeyboardSetTarget( keyboard, textarea):
    keyboard.set_textarea(textarea)
    return

def ModifyFlag( obj, flag, value):
    if (value=="TOGGLE"):
        if ( obj.has_flag(flag) ):
            obj.clear_flag(flag)
        else:
            obj.add_flag(flag)
        return

    if (value=="ADD"):
        obj.add_flag(flag)
    else:
        obj.clear_flag(flag)
    return

def ModifyState( obj, state, value):
    if (value=="TOGGLE"):
        if ( obj.has_state(state) ):
            obj.clear_state(state)
        else:
            obj.add_state(state)
        return

    if (value=="ADD"):
        obj.add_state(state)
    else:
        obj.clear_state(state)
    return

def TextAreaMoveCursor( trg, val):
    if val=="UP" : trg.cursor_up()
    if val=="RIGHT" : trg.cursor_right()
    if val=="DOWN" : trg.cursor_down()
    if val=="LEFT" : trg.cursor_left()
    trg.add_state(lv.STATE.FOCUSED)
    return

def set_opacity(obj, v):
    obj.set_style_opa(v, lv.STATE.DEFAULT|lv.PART.MAIN)
    return

def SetTextValueArc( trg, src, prefix, postfix):
    trg.set_text(prefix+str(src.get_value())+postfix)
    return

def SetTextValueSlider( trg, src, prefix, postfix):
    trg.set_text(prefix+str(src.get_value())+postfix)
    return

def SetTextValueChecked( trg, src, txton, txtoff):
    if src.has_state(lv.STATE.CHECKED):
        trg.set_text(txton)
    else:
        trg.set_text(txtoff)
    return

def StepSpinbox( trg, val):
    if val==1 : trg.increment()
    if val==-1 : trg.decrement()
    lv.event_send(trg,lv.EVENT.VALUE_CHANGED, None)
    return

def SwitchTheme(val):
    ui_theme_set(val)
    return

# COMPONENTS
ui____initial_actions0 = lv.obj()

def Button1_eventhandler(event_struct):
   event = event_struct.code
   if event == lv.EVENT.CLICKED and True:
      SetLabelProperty(ui_Label1, 'Text', '123')
   return

def Button2_eventhandler(event_struct):
   event = event_struct.code
   if event == lv.EVENT.CLICKED and True:
      ChangeScreen( ui_Screen3, lv.SCR_LOAD_ANIM.FADE_ON, 500, 0)
   return

ui_Screen1 = lv.obj()
SetFlag(ui_Screen1, lv.obj.FLAG.SCROLLABLE, False)

ui_Container1 = lv.obj(ui_Screen1)
ui_Container1.remove_style_all()
ui_Container1.set_width(200)
ui_Container1.set_height(400)
ui_Container1.set_x(-267)
ui_Container1.set_y(0)
ui_Container1.set_align( lv.ALIGN.CENTER)
SetFlag(ui_Container1, lv.obj.FLAG.CLICKABLE, False)
SetFlag(ui_Container1, lv.obj.FLAG.SCROLLABLE, False)
ui_Container1.set_style_bg_color(lv.color_hex(0xFDFBAC), lv.PART.MAIN | lv.STATE.DEFAULT )
ui_Container1.set_style_bg_opa(255, lv.PART.MAIN| lv.STATE.DEFAULT )

ui_Button1 = lv.btn(ui_Container1)
ui_Button1.set_width(145)
ui_Button1.set_height(50)
ui_Button1.set_x(-3)
ui_Button1.set_y(-148)
ui_Button1.set_align( lv.ALIGN.CENTER)
SetFlag(ui_Button1, lv.obj.FLAG.SCROLLABLE, False)
SetFlag(ui_Button1, lv.obj.FLAG.SCROLL_ON_FOCUS, True)

ui_Label1 = lv.label(ui_Button1)
ui_Label1.set_width(lv.SIZE.CONTENT)	# 1
ui_Label1.set_height(lv.SIZE.CONTENT)   # 1
ui_Label1.set_align( lv.ALIGN.CENTER)

ui_Button1.add_event_cb(Button1_eventhandler, lv.EVENT.ALL, None)
ui_Button2 = lv.btn(ui_Container1)
ui_Button2.set_width(145)
ui_Button2.set_height(50)
ui_Button2.set_x(-1)
ui_Button2.set_y(-86)
ui_Button2.set_align( lv.ALIGN.CENTER)
SetFlag(ui_Button2, lv.obj.FLAG.SCROLLABLE, False)
SetFlag(ui_Button2, lv.obj.FLAG.SCROLL_ON_FOCUS, True)

ui_Label2 = lv.label(ui_Button2)
ui_Label2.set_width(lv.SIZE.CONTENT)	# 1
ui_Label2.set_height(lv.SIZE.CONTENT)   # 1
ui_Label2.set_align( lv.ALIGN.CENTER)

ui_Button2.add_event_cb(Button2_eventhandler, lv.EVENT.ALL, None)
ui_TextArea1 = lv.textarea(ui_Container1)
ui_TextArea1.set_width(150)
ui_TextArea1.set_height(75)
ui_TextArea1.set_placeholder_text("Placeholder...")
ui_TextArea1.set_x(5)
ui_TextArea1.set_y(139)
ui_TextArea1.set_align( lv.ALIGN.CENTER)

ui_Container2 = lv.obj(ui_Screen1)
ui_Container2.remove_style_all()
ui_Container2.set_width(526)
ui_Container2.set_height(400)
ui_Container2.set_x(110)
ui_Container2.set_y(0)
ui_Container2.set_align( lv.ALIGN.CENTER)
SetFlag(ui_Container2, lv.obj.FLAG.CLICKABLE, False)
SetFlag(ui_Container2, lv.obj.FLAG.SCROLLABLE, False)
ui_Container2.set_style_bg_color(lv.color_hex(0xFDFBAC), lv.PART.MAIN | lv.STATE.DEFAULT )
ui_Container2.set_style_bg_opa(255, lv.PART.MAIN| lv.STATE.DEFAULT )

ui_Dropdown1 = lv.dropdown(ui_Container2)
ui_Dropdown1.set_width(470)
ui_Dropdown1.set_height(lv.SIZE.CONTENT)   # 1
ui_Dropdown1.set_x(-5)
ui_Dropdown1.set_y(-160)
ui_Dropdown1.set_align( lv.ALIGN.CENTER)
SetFlag(ui_Dropdown1, lv.obj.FLAG.SCROLL_ON_FOCUS, True)

ui_Slider1 = lv.slider(ui_Container2)
ui_Slider1.set_width(451)
ui_Slider1.set_height(10)
ui_Slider1.set_x(-2)
ui_Slider1.set_y(-111)
ui_Slider1.set_align( lv.ALIGN.CENTER)
ui_Slider1.set_value(0, lv.ANIM.OFF)  # need refresh: 0,100
if 'NORMAL' is 'RANGE': ui_Slider1.set_left_value(0, lv.ANIM.OFF)

ui_Switch1 = lv.switch(ui_Container2)
ui_Switch1.set_width(50)
ui_Switch1.set_height(25)
ui_Switch1.set_x(-208)
ui_Switch1.set_y(-66)
ui_Switch1.set_align( lv.ALIGN.CENTER)

ui_Label4 = lv.label(ui_Container2)
ui_Label4.set_width(lv.SIZE.CONTENT)	# 1
ui_Label4.set_height(lv.SIZE.CONTENT)   # 1
ui_Label4.set_x(-155)
ui_Label4.set_y(61)
ui_Label4.set_align( lv.ALIGN.CENTER)
ui_Label4.set_style_text_font( font_FontHR20, lv.PART.MAIN | lv.STATE.DEFAULT )
ui_Label4.set_style_border_color(lv.color_hex(0x000000), lv.PART.MAIN | lv.STATE.DEFAULT )
ui_Label4.set_style_border_opa(255, lv.PART.MAIN| lv.STATE.DEFAULT )
ui_Label4.set_style_border_width( 1, lv.PART.MAIN | lv.STATE.DEFAULT )
ui_Label4.set_style_border_side( lv.BORDER_SIDE.FULL, lv.PART.MAIN | lv.STATE.DEFAULT )
ui_Label4.set_style_pad_left( 5, lv.PART.MAIN | lv.STATE.DEFAULT )
ui_Label4.set_style_pad_right( 5, lv.PART.MAIN | lv.STATE.DEFAULT )
ui_Label4.set_style_pad_top( 5, lv.PART.MAIN | lv.STATE.DEFAULT )
ui_Label4.set_style_pad_bottom( 5, lv.PART.MAIN | lv.STATE.DEFAULT )

ui_Roller1 = lv.roller(ui_Screen1)
ui_Roller1.set_options("Option 1\nOption 2\nOption 3", lv.roller.MODE.NORMAL)
ui_Roller1.set_selected(0,lv.ANIM.OFF) # need update when change: Option 1\nOption 2\nOption 3
ui_Roller1.set_height(204)
ui_Roller1.set_width(lv.SIZE.CONTENT)	# 1
ui_Roller1.set_x(288)
ui_Roller1.set_y(16)
ui_Roller1.set_align( lv.ALIGN.CENTER)

ui_Checkbox1 = lv.checkbox(ui_Screen1)
ui_Checkbox1.set_width(lv.SIZE.CONTENT)	# 1
ui_Checkbox1.set_height(lv.SIZE.CONTENT)   # 1
ui_Checkbox1.set_x(-65)
ui_Checkbox1.set_y(-20)
ui_Checkbox1.set_align( lv.ALIGN.CENTER)
SetFlag(ui_Checkbox1, lv.obj.FLAG.SCROLL_ON_FOCUS, True)

def Button3_eventhandler(event_struct):
   event = event_struct.code
   if event == lv.EVENT.CLICKED and True:
      ChangeScreen( ui_Screen1, lv.SCR_LOAD_ANIM.NONE, 500, 0)
   return

ui_Screen3 = lv.obj()
SetFlag(ui_Screen3, lv.obj.FLAG.SCROLLABLE, False)

ui_TabView1 = lv.tabview(ui_Screen3, lv.DIR.TOP, 50)
ui_TabView1.set_width(745)
ui_TabView1.set_height(375)
ui_TabView1.set_x(0)
ui_TabView1.set_y(28)
ui_TabView1.set_align( lv.ALIGN.CENTER)

ui_TabPage1 = (ui_TabView1).add_tab("Title 1")

ui_TabPage2 = (ui_TabView1).add_tab("Title 2")

ui_TabPage3 = (ui_TabView1).add_tab("Title 3")

ui_TabPage4 = (ui_TabView1).add_tab("Title 4")

ui_Container3 = lv.obj(ui_Screen3)
ui_Container3.remove_style_all()
ui_Container3.set_width(744)
ui_Container3.set_height(60)
ui_Container3.set_x(4)
ui_Container3.set_y(-198)
ui_Container3.set_align( lv.ALIGN.CENTER)
SetFlag(ui_Container3, lv.obj.FLAG.CLICKABLE, False)
SetFlag(ui_Container3, lv.obj.FLAG.SCROLLABLE, False)
ui_Container3.set_style_bg_color(lv.color_hex(0xFDFBAC), lv.PART.MAIN | lv.STATE.DEFAULT )
ui_Container3.set_style_bg_opa(255, lv.PART.MAIN| lv.STATE.DEFAULT )

ui_Button3 = lv.btn(ui_Container3)
ui_Button3.set_width(100)
ui_Button3.set_height(50)
ui_Button3.set_x(-301)
ui_Button3.set_y(0)
ui_Button3.set_align( lv.ALIGN.CENTER)
SetFlag(ui_Button3, lv.obj.FLAG.SCROLLABLE, False)
SetFlag(ui_Button3, lv.obj.FLAG.SCROLL_ON_FOCUS, True)

ui_Label5 = lv.label(ui_Button3)
ui_Label5.set_text("<<<")
ui_Label5.set_width(lv.SIZE.CONTENT)	# 1
ui_Label5.set_height(lv.SIZE.CONTENT)   # 1
ui_Label5.set_align( lv.ALIGN.CENTER)

ui_Button3.add_event_cb(Button3_eventhandler, lv.EVENT.ALL, None)
ui_Label6 = lv.label(ui_Container3)
ui_Label6.set_text("Settings")
ui_Label6.set_width(lv.SIZE.CONTENT)	# 1
ui_Label6.set_height(lv.SIZE.CONTENT)   # 1
ui_Label6.set_align( lv.ALIGN.CENTER)

lv.scr_load(ui_Screen1)
